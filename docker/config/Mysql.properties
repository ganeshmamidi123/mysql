# The id of the broker. This must be set to a unique integer for each broker.
# Below values will be replaced by startup script depending on Docker environment variable.
broker.id=1
# broker.rack=rack1
listeners=PLAINTEXT://:9092

# Hostname and port the broker will advertise to producers and consumers. If not set,
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
# advertised.listeners=PLAINTEXT://your.host.name:9092

# The number of threads that the server uses for receiving requests from the network and sending responses to the network.
num.network.threads=3
# The number of threads that the server uses for processing requests, which may include disk I/O.
num.io.threads=8

# The send buffer (SO_SNDBUF) used by the socket server.
socket.send.buffer.bytes=102400
# The receive buffer (SO_RCVBUF) used by the socket server.
socket.receive.buffer.bytes=102400
# The maximum size of a request that the socket server will accept (protection against OOM).
socket.request.max.bytes=104857600

# A comma separated list of directories under which to store log files.
log.dirs=/volume/kafka/data

# The default number of log partitions per topic.
num.partitions=1
# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
num.recovery.threads.per.data.dir=1

# Below values will be replaced by startup script depending on Docker environment variable.
default.replication.factor=1
min.insync.replicas=1
offsets.topic.replication.factor=1
transaction.state.log.replication.factor=1
transaction.state.log.min.isr=1

# The number of messages to accept before forcing a flush of data to disk.
log.flush.interval.messages=10000
# The maximum amount of time a message can sit in a log before we force a flush.
log.flush.interval.ms=1000

# The minimum age of a log file to be eligible for deletion due to age.
log.retention.hours=-1
# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
log.retention.bytes=1073741824
# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=1073741824
# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies.
log.retention.check.interval.ms=300000

# Zookeeper connection string (see zookeeper docs for details).
# Value will be replaced by startup script depending on Docker environment variable.
zookeeper.connect=localhost:2181
# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=6000

auto.create.topics.enable=false
